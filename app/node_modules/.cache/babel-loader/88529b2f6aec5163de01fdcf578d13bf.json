{"ast":null,"code":"import React, { Component } from 'react';\n\nfunction Loader() {\n  return React.createElement(\"div\", {\n    className: \"loading-indicator\"\n  }, React.createElement(\"span\", {\n    className: \"loading-bullet\"\n  }, \"\\u2022\"), ' ', React.createElement(\"span\", {\n    className: \"loading-bullet\"\n  }, \"\\u2022\"), ' ', React.createElement(\"span\", {\n    className: \"loading-bullet\"\n  }, \"\\u2022\"));\n} // https://gist.github.com/Alex1990/046a6553dc83e22dd6f4\n\n/**\n * Get the current active element safely.\n * Ref: https://github.com/jquery/jquery-ui/blob/2b84531ae9331f60e4d739fabca6d78abde89ae1/ui/safe-active-element.js\n */\n\n\nfunction safeActiveElement(doc) {\n  doc = doc || document;\n  var activeElement = void 0;\n\n  try {\n    activeElement = document.activeElement;\n\n    if (!activeElement || !activeElement.nodeName) {\n      activeElement = doc.body;\n    }\n  } catch (error) {\n    activeElement = doc.body;\n  }\n\n  return activeElement;\n}\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar defaultProps = {\n  tag: 'div',\n  renderChildren: true,\n  loader: Loader\n};\n\nvar BlockUi$1 = function (_Component) {\n  inherits(BlockUi, _Component);\n\n  function BlockUi(props) {\n    classCallCheck(this, BlockUi);\n\n    var _this = possibleConstructorReturn(this, (BlockUi.__proto__ || Object.getPrototypeOf(BlockUi)).call(this, props));\n\n    _this.tabbedUpTop = _this.tabbedUpTop.bind(_this);\n    _this.tabbedDownTop = _this.tabbedDownTop.bind(_this);\n    _this.tabbedUpBottom = _this.tabbedUpBottom.bind(_this);\n    _this.tabbedDownBottom = _this.tabbedDownBottom.bind(_this);\n    _this.setHelper = _this.setRef.bind(_this, 'helper');\n    _this.setBlocker = _this.setRef.bind(_this, 'blocker');\n    _this.setTopFocus = _this.setRef.bind(_this, 'topFocus');\n    _this.setContainer = _this.setRef.bind(_this, 'container');\n    _this.setMessageContainer = _this.setRef.bind(_this, 'messageContainer');\n    _this.handleScroll = _this.handleScroll.bind(_this);\n    _this.state = {\n      top: '50%'\n    };\n    return _this;\n  }\n\n  createClass(BlockUi, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      if (nextProps.blocking !== this.props.blocking) {\n        if (nextProps.blocking) {\n          // blocking started\n          if (this.helper && this.helper.parentNode && this.helper.parentNode.contains && this.helper.parentNode.contains(safeActiveElement())) {\n            this.focused = safeActiveElement(); // https://www.tjvantoll.com/2013/08/30/bugs-with-document-activeelement-in-internet-explorer/#blurring-the-body-switches-windows-in-ie9-and-ie10\n\n            if (this.focused && this.focused !== document.body) {\n              (window.setImmediate || setTimeout)(function () {\n                return _this2.focused && _this2.focused.blur();\n              });\n            }\n          }\n        } else {\n          this.detachListeners();\n          var ae = safeActiveElement();\n\n          if (this.focused && (!ae || ae === document.body || ae === this.topFocus)) {\n            this.focused.focus();\n            this.focused = null;\n          }\n        }\n      }\n\n      if (nextProps.keepInView && (nextProps.keepInView !== this.props.keepInView || nextProps.blocking && nextProps.blocking !== this.props.blocking)) {\n        this.attachListeners();\n        this.keepInView(nextProps);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.detachListeners();\n    }\n  }, {\n    key: 'setRef',\n    value: function setRef(name, ref) {\n      this[name] = ref;\n    }\n  }, {\n    key: 'attachListeners',\n    value: function attachListeners() {\n      window.addEventListener('scroll', this.handleScroll);\n    }\n  }, {\n    key: 'detachListeners',\n    value: function detachListeners() {\n      window.removeEventListener('scroll', this.handleScroll);\n    }\n  }, {\n    key: 'blockingTab',\n    value: function blockingTab(e) {\n      var withShift = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; // eslint-disable-next-line eqeqeq\n\n      return this.props.blocking && (e.key === 'Tab' || e.keyCode === 9) && e.shiftKey == withShift;\n    }\n  }, {\n    key: 'tabbedUpTop',\n    value: function tabbedUpTop(e) {\n      if (this.blockingTab(e)) {\n        this.blocker.focus();\n      }\n    }\n  }, {\n    key: 'tabbedDownTop',\n    value: function tabbedDownTop(e) {\n      if (this.blockingTab(e)) {\n        e.preventDefault();\n        this.blocker.focus();\n      }\n    }\n  }, {\n    key: 'tabbedUpBottom',\n    value: function tabbedUpBottom(e) {\n      if (this.blockingTab(e, true)) {\n        this.topFocus.focus();\n      }\n    }\n  }, {\n    key: 'tabbedDownBottom',\n    value: function tabbedDownBottom(e) {\n      if (this.blockingTab(e, true)) {\n        e.preventDefault();\n        this.topFocus.focus();\n      }\n    }\n  }, {\n    key: 'keepInView',\n    value: function keepInView() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n\n      if (props.blocking && props.keepInView && this.container) {\n        var containerBounds = this.container.getBoundingClientRect();\n        var windowHeight = window.innerHeight;\n        if (containerBounds.top > windowHeight || containerBounds.bottom < 0) return;\n\n        if (containerBounds.top >= 0 && containerBounds.bottom <= windowHeight) {\n          if (this.state.top !== '50%') {\n            this.setState({\n              top: '50%'\n            });\n          }\n\n          return;\n        }\n\n        var messageBoundsHeight = this.messageContainer ? this.messageContainer.getBoundingClientRect().height : 0;\n        var top = Math.max(Math.min(windowHeight, containerBounds.bottom) - Math.max(containerBounds.top, 0), messageBoundsHeight) / 2;\n\n        if (containerBounds.top < 0) {\n          top = Math.min(top - containerBounds.top, containerBounds.height - messageBoundsHeight / 2);\n        }\n\n        if (this.state.top !== top) {\n          this.setState({\n            top: top\n          });\n        }\n      }\n    }\n  }, {\n    key: 'handleScroll',\n    value: function handleScroll() {\n      this.keepInView();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          Tag = _props.tag,\n          blocking = _props.blocking,\n          className = _props.className,\n          children = _props.children,\n          message = _props.message,\n          Loader$$1 = _props.loader,\n          renderChildren = _props.renderChildren,\n          keepInView = _props.keepInView,\n          attributes = objectWithoutProperties(_props, ['tag', 'blocking', 'className', 'children', 'message', 'loader', 'renderChildren', 'keepInView']);\n      var classes = blocking ? 'block-ui ' + className : className;\n      var renderChilds = !blocking || renderChildren;\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes,\n        'aria-busy': blocking,\n        ref: this.setContainer\n      }), blocking && React.createElement('div', {\n        tabIndex: '0',\n        onKeyUp: this.tabbedUpTop,\n        onKeyDown: this.tabbedDownTop,\n        ref: this.setTopFocus\n      }), renderChilds && children, blocking && React.createElement('div', {\n        className: 'block-ui-container',\n        tabIndex: '0',\n        ref: this.setBlocker,\n        onKeyUp: this.tabbedUpBottom,\n        onKeyDown: this.tabbedDownBottom\n      }, React.createElement('div', {\n        className: 'block-ui-overlay'\n      }), React.createElement('div', {\n        className: 'block-ui-message-container',\n        ref: this.setMessageContainer,\n        style: {\n          top: keepInView ? this.state.top : undefined\n        }\n      }, React.createElement('div', {\n        className: 'block-ui-message'\n      }, message, React.isValidElement(Loader$$1) ? Loader$$1 : React.createElement(Loader$$1, null)))), React.createElement('span', {\n        ref: this.setHelper\n      }));\n    }\n  }]);\n  return BlockUi;\n}(Component);\n\nBlockUi$1.defaultProps = defaultProps;\nexport default BlockUi$1;","map":null,"metadata":{},"sourceType":"module"}