{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DateTimeRangePicker = exports.momentFormat = exports.ModeEnum = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nrequire(\"./style/DateTimeRange.css\");\n\nvar _Ranges = _interopRequireDefault(require(\"./ranges/Ranges\"));\n\nvar _DatePicker = _interopRequireDefault(require(\"./date_picker/DatePicker\"));\n\nvar _reactDotFragment = _interopRequireDefault(require(\"react-dot-fragment\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _TimeFunctionUtils = require(\"./utils/TimeFunctionUtils\");\n\nvar _DateSelectedUtils = require(\"./utils/DateSelectedUtils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar ModeEnum = Object.freeze({\n  \"start\": \"start\",\n  \"end\": \"end\"\n});\nexports.ModeEnum = ModeEnum;\nvar momentFormat = \"DD-MM-YYYY HH:mm\";\nexports.momentFormat = momentFormat;\n\nvar DateTimeRangePicker =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DateTimeRangePicker, _React$Component);\n\n  function DateTimeRangePicker(props) {\n    var _this;\n\n    _classCallCheck(this, DateTimeRangePicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DateTimeRangePicker).call(this, props));\n    var ranges = {};\n    var customRange = {\n      \"Custom Range\": \"Custom Range\"\n    };\n    Object.assign(ranges, _this.props.ranges, customRange);\n\n    if (_this.props.local && _this.props.local.format) {\n      exports.momentFormat = momentFormat = _this.props.local.format;\n    }\n\n    _this.state = {\n      selectedRange: 0,\n      selectingModeFrom: true,\n      ranges: ranges,\n      start: _this.props.start,\n      startLabel: _this.props.start.format(momentFormat),\n      end: _this.props.end,\n      endLabel: _this.props.end.format(momentFormat),\n      focusDate: false\n    };\n\n    _this.bindToFunctions();\n\n    return _this;\n  }\n\n  _createClass(DateTimeRangePicker, [{\n    key: \"bindToFunctions\",\n    value: function bindToFunctions() {\n      this.rangeSelectedCallback = this.rangeSelectedCallback.bind(this);\n      this.dateSelectedNoTimeCallback = this.dateSelectedNoTimeCallback.bind(this);\n      this.timeChangeCallback = this.timeChangeCallback.bind(this);\n      this.dateTextFieldCallback = this.dateTextFieldCallback.bind(this);\n      this.onChangeDateTextHandlerCallback = this.onChangeDateTextHandlerCallback.bind(this);\n      this.changeSelectingModeCallback = this.changeSelectingModeCallback.bind(this);\n      this.applyCallback = this.applyCallback.bind(this);\n      this.keyboardCellCallback = this.keyboardCellCallback.bind(this);\n      this.focusOnCallback = this.focusOnCallback.bind(this);\n      this.cellFocusedCallback = this.cellFocusedCallback.bind(this);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setToRangeValue(this.state.start, this.state.end);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (!this.props.start.isSame(prevProps.start)) {\n        this.updateStartEndAndLabels(this.props.start, this.state.end);\n      } else if (!this.props.end.isSame(prevProps.end)) {\n        this.updateStartEndAndLabels(this.state.start, this.props.end);\n      }\n    }\n  }, {\n    key: \"applyCallback\",\n    value: function applyCallback() {\n      this.props.applyCallback(this.state.start, this.state.end);\n      this.props.changeVisibleState();\n    }\n  }, {\n    key: \"rangeSelectedCallback\",\n    value: function rangeSelectedCallback(index, value) {\n      // If Past Max Date Dont allow update\n      var start;\n      var end;\n\n      if (value !== \"Custom Range\") {\n        start = this.state.ranges[value][0];\n        end = this.state.ranges[value][1];\n\n        if ((0, _DateSelectedUtils.pastMaxDate)(start, this.props.maxDate, true) || (0, _DateSelectedUtils.pastMaxDate)(end, this.props.maxDate, true)) {\n          return false;\n        }\n      } // Else update state to new selected index and update start and end time\n\n\n      this.setState({\n        selectedRange: index\n      });\n\n      if (value !== \"Custom Range\") {\n        this.updateStartEndAndLabels(start, end);\n      }\n    }\n  }, {\n    key: \"setToRangeValue\",\n    value: function setToRangeValue(startDate, endDate) {\n      var rangesArray = Object.values(this.state.ranges);\n\n      for (var i = 0; i < rangesArray.length; i++) {\n        if (rangesArray[i] === \"Custom Range\") {\n          continue;\n        } else if (rangesArray[i][0].isSame(startDate, \"minutes\") && rangesArray[i][1].isSame(endDate, \"minutes\")) {\n          this.setState({\n            selectedRange: i\n          });\n          return;\n        }\n      }\n\n      this.setToCustomRange();\n    }\n  }, {\n    key: \"setToCustomRange\",\n    value: function setToCustomRange() {\n      var rangesArray = Object.values(this.state.ranges);\n\n      for (var i = 0; i < rangesArray.length; i++) {\n        if (rangesArray[i] === \"Custom Range\") {\n          this.setState({\n            selectedRange: i\n          });\n        }\n      }\n    }\n  }, {\n    key: \"updateStartEndAndLabels\",\n    value: function updateStartEndAndLabels(newStart, newEnd) {\n      this.setState({\n        start: newStart,\n        startLabel: newStart.format(momentFormat),\n        end: newEnd,\n        endLabel: newEnd.format(momentFormat)\n      });\n    }\n  }, {\n    key: \"dateSelectedNoTimeCallback\",\n    value: function dateSelectedNoTimeCallback(cellDate) {\n      var newDates = (0, _DateSelectedUtils.datePicked)(this.state.start, this.state.end, cellDate, this.state.selectingModeFrom);\n      var startDate = newDates.startDate;\n      var endDate = newDates.endDate;\n      var newStart = this.duplicateMomentTimeFromState(startDate, true);\n      var newEnd = this.duplicateMomentTimeFromState(endDate, false);\n      this.updateStartEndAndLabels(newStart, newEnd);\n      this.setToRangeValue(newStart, newEnd);\n      this.setState(function (prevState) {\n        return {\n          selectingModeFrom: !prevState.selectingModeFrom\n        };\n      });\n    }\n  }, {\n    key: \"changeSelectingModeCallback\",\n    value: function changeSelectingModeCallback(selectingModeFromParam) {\n      this.setState({\n        selectingModeFrom: selectingModeFromParam\n      });\n    }\n  }, {\n    key: \"duplicateMomentTimeFromState\",\n    value: function duplicateMomentTimeFromState(date, startDate) {\n      var state;\n\n      if (startDate) {\n        state = this.state.start;\n      } else {\n        state = this.state.end;\n      }\n\n      var newDate = [date.year(), date.month(), date.date(), state.hours(), state.minutes()];\n      return (0, _moment.default)(newDate);\n    }\n  }, {\n    key: \"timeChangeCallback\",\n    value: function timeChangeCallback(newHour, newMinute, mode) {\n      if (mode === \"start\") {\n        this.updateStartTime(newHour, newMinute, mode);\n      } else if (mode === \"end\") {\n        this.updateEndTime(newHour, newMinute, mode);\n      }\n    }\n  }, {\n    key: \"updateStartTime\",\n    value: function updateStartTime(newHour, newMinute, mode) {\n      this.updateTime(this.state.start, newHour, newMinute, mode, \"start\", \"startLabel\");\n    }\n  }, {\n    key: \"updateEndTime\",\n    value: function updateEndTime(newHour, newMinute, mode) {\n      this.updateTime(this.state.end, newHour, newMinute, mode, \"end\", \"endLabel\");\n    }\n  }, {\n    key: \"updateTime\",\n    value: function updateTime(origDate, newHour, newMinute, mode, stateDateToChangeName, stateLabelToChangeName) {\n      var date = (0, _moment.default)(origDate);\n      date.hours(newHour);\n      date.minutes(newMinute); // If Past Max Date Dont allow update\n\n      if ((0, _DateSelectedUtils.pastMaxDate)(date, this.props.maxDate, true)) {\n        return false;\n      } // If Valid Time Change allow the change else set new start and end times \n      // to be minute ahead/behind the new date\n\n\n      if ((0, _TimeFunctionUtils.isValidTimeChange)(mode, date, this.state.start, this.state.end)) {\n        var _this$setState;\n\n        this.setState((_this$setState = {}, _defineProperty(_this$setState, stateDateToChangeName, date), _defineProperty(_this$setState, stateLabelToChangeName, date.format(momentFormat)), _this$setState));\n        this.updateTimeCustomRangeUpdator(stateDateToChangeName, date);\n      } else {\n        var newDate = (0, _moment.default)(date);\n\n        if (mode === \"start\") {\n          newDate.add(1, \"minute\");\n          this.updateStartEndAndLabels(date, newDate);\n          this.setToRangeValue(date, newDate);\n        } else {\n          newDate.subtract(1, \"minute\");\n          this.updateStartEndAndLabels(newDate, date);\n          this.setToRangeValue(newDate, date);\n        }\n      }\n    }\n  }, {\n    key: \"updateTimeCustomRangeUpdator\",\n    value: function updateTimeCustomRangeUpdator(stateDateToChangeName, date) {\n      if (stateDateToChangeName === \"start\") {\n        this.setToRangeValue(date, this.state.end);\n      } else {\n        this.setToRangeValue(this.state.start, date);\n      }\n    }\n  }, {\n    key: \"dateTextFieldCallback\",\n    value: function dateTextFieldCallback(mode) {\n      if (mode === \"start\") {\n        var newDate = (0, _moment.default)(this.state.startLabel, momentFormat);\n        var isValidNewDate = newDate.isValid();\n        var isSameOrBeforeEnd = newDate.isSameOrBefore(this.state.end, \"minute\");\n        var isAfterEndDate = newDate.isAfter(this.state.end);\n        this.updateDate(mode, newDate, isValidNewDate, isSameOrBeforeEnd, isAfterEndDate, \"start\", \"startLabel\");\n      } else {\n        var _newDate = (0, _moment.default)(this.state.endLabel, momentFormat);\n\n        var _isValidNewDate = _newDate.isValid();\n\n        var isBeforeStartDate = _newDate.isBefore(this.state.start);\n\n        var isSameOrAfterStartDate = _newDate.isSameOrAfter(this.state.start, \"minute\");\n\n        this.updateDate(mode, _newDate, _isValidNewDate, isSameOrAfterStartDate, isBeforeStartDate, \"end\", \"endLabel\");\n      }\n    }\n  }, {\n    key: \"updateDate\",\n    value: function updateDate(mode, newDate, isValidNewDate, isValidDateChange, isInvalidDateChange, stateDateToChangeName, stateLabelToChangeName) {\n      // If new date past max date dont allow change\n      if ((0, _DateSelectedUtils.pastMaxDate)(newDate, this.props.maxDate, true)) {\n        this.updateStartEndAndLabels(this.state.start, this.state.end);\n        return false;\n      } // Else if date valid and date change valid update the date, \n      // if date invalid go into update invalid mode, adds/subtract 1 days from start/stop value\n\n\n      if (isValidNewDate && isValidDateChange) {\n        var _this$setState2;\n\n        this.setState((_this$setState2 = {}, _defineProperty(_this$setState2, stateDateToChangeName, newDate), _defineProperty(_this$setState2, stateLabelToChangeName, newDate.format(momentFormat)), _this$setState2));\n        this.updateTimeCustomRangeUpdator(stateDateToChangeName, newDate);\n      } else if (isValidNewDate && isInvalidDateChange) {\n        this.updateInvalidDate(mode, newDate);\n      } else if (!isValidNewDate) {\n        this.updateStartEndAndLabels(this.state.start, this.state.end);\n      }\n    }\n  }, {\n    key: \"updateInvalidDate\",\n    value: function updateInvalidDate(mode, newDate) {\n      if (mode === \"start\") {\n        var newEndDate = (0, _moment.default)(newDate).add(1, \"day\");\n        this.updateLabelsAndRangeValues(newDate, newEndDate);\n      } else {\n        var newStartDate = (0, _moment.default)(newDate).subtract(1, \"day\");\n        this.updateStartEndAndLabels(newStartDate, newDate);\n      }\n    }\n  }, {\n    key: \"updateLabelsAndRangeValues\",\n    value: function updateLabelsAndRangeValues(startDate, endDate) {\n      this.updateStartEndAndLabels(startDate, endDate);\n      this.setToRangeValue(startDate, endDate);\n    }\n  }, {\n    key: \"onChangeDateTextHandlerCallback\",\n    value: function onChangeDateTextHandlerCallback(newValue, mode) {\n      if (mode === \"start\") {\n        this.setState({\n          startLabel: newValue\n        });\n      } else if (mode === \"end\") {\n        this.setState({\n          endLabel: newValue\n        });\n      }\n    }\n  }, {\n    key: \"keyboardCellCallback\",\n    value: function keyboardCellCallback(originalDate, newDate) {\n      var startDate;\n      var endDate;\n\n      if (originalDate.isSame(this.state.start, \"day\")) {\n        startDate = this.duplicateMomentTimeFromState(newDate, true);\n        endDate = (0, _moment.default)(this.state.end);\n      } else {\n        startDate = (0, _moment.default)(this.state.start);\n        endDate = this.duplicateMomentTimeFromState(newDate, false);\n        ;\n      }\n\n      if (startDate.isBefore(endDate, \"day\")) {\n        this.updateStartEndAndLabels(startDate, endDate);\n      } else {\n        this.updateStartEndAndLabels(endDate, startDate);\n      }\n    }\n  }, {\n    key: \"focusOnCallback\",\n    value: function focusOnCallback(date) {\n      if (date) {\n        this.setState({\n          focusDate: date\n        });\n      } else {\n        this.setState({\n          focusDate: false\n        });\n      }\n    }\n  }, {\n    key: \"cellFocusedCallback\",\n    value: function cellFocusedCallback(date) {\n      if (date.isSame(this.state.start, \"day\")) {\n        this.changeSelectingModeCallback(true);\n      } else if (date.isSame(this.state.end, \"day\")) {\n        this.changeSelectingModeCallback(false);\n      }\n    }\n  }, {\n    key: \"renderStartDate\",\n    value: function renderStartDate() {\n      return _react.default.createElement(_DatePicker.default, {\n        label: \"From Date\",\n        date: this.state.start,\n        otherDate: this.state.end,\n        mode: ModeEnum.start,\n        dateSelectedNoTimeCallback: this.dateSelectedNoTimeCallback,\n        timeChangeCallback: this.timeChangeCallback,\n        dateTextFieldCallback: this.dateTextFieldCallback,\n        keyboardCellCallback: this.keyboardCellCallback,\n        focusOnCallback: this.focusOnCallback,\n        focusDate: this.state.focusDate,\n        cellFocusedCallback: this.cellFocusedCallback,\n        onChangeDateTextHandlerCallback: this.onChangeDateTextHandlerCallback,\n        dateLabel: this.state.startLabel,\n        selectingModeFrom: this.state.selectingModeFrom,\n        changeSelectingModeCallback: this.changeSelectingModeCallback,\n        applyCallback: this.applyCallback,\n        maxDate: this.props.maxDate,\n        local: this.props.local\n      });\n    }\n  }, {\n    key: \"renderEndDate\",\n    value: function renderEndDate() {\n      return _react.default.createElement(_DatePicker.default, {\n        label: \"To Date\",\n        date: this.state.end,\n        otherDate: this.state.start,\n        mode: ModeEnum.end,\n        dateSelectedNoTimeCallback: this.dateSelectedNoTimeCallback,\n        timeChangeCallback: this.timeChangeCallback,\n        dateTextFieldCallback: this.dateTextFieldCallback,\n        keyboardCellCallback: this.keyboardCellCallback,\n        focusOnCallback: this.focusOnCallback,\n        focusDate: this.state.focusDate,\n        cellFocusedCallback: this.cellFocusedCallback,\n        onChangeDateTextHandlerCallback: this.onChangeDateTextHandlerCallback,\n        dateLabel: this.state.endLabel,\n        changeVisibleState: this.props.changeVisibleState,\n        selectingModeFrom: this.state.selectingModeFrom,\n        changeSelectingModeCallback: this.changeSelectingModeCallback,\n        applyCallback: this.applyCallback,\n        maxDate: this.props.maxDate,\n        local: this.props.local,\n        enableButtons: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(_reactDotFragment.default, null, _react.default.createElement(_Ranges.default, {\n        ranges: this.state.ranges,\n        selectedRange: this.state.selectedRange,\n        rangeSelectedCallback: this.rangeSelectedCallback,\n        screenWidthToTheRight: this.props.screenWidthToTheRight\n      }), this.renderStartDate(), this.renderEndDate());\n    }\n  }]);\n\n  return DateTimeRangePicker;\n}(_react.default.Component);\n\nexports.DateTimeRangePicker = DateTimeRangePicker;","map":null,"metadata":{},"sourceType":"script"}