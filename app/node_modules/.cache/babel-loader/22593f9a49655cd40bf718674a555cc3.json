{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nrequire(\"../style/DateTimeRange.css\");\n\nvar _TimeFunctionUtils = require(\"../utils/TimeFunctionUtils\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _StyleUtils = require(\"../utils/StyleUtils\");\n\nvar _DateSelectedUtils = require(\"../utils/DateSelectedUtils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar Cell =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Cell, _React$Component);\n\n  function Cell(props) {\n    var _this;\n\n    _classCallCheck(this, Cell);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Cell).call(this, props));\n    _this.state = {\n      style: {}\n    };\n    _this.mouseEnter = _this.mouseEnter.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.mouseLeave = _this.mouseLeave.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.keyDown = _this.keyDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Cell, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(oldProps) {\n      if (!this.props.date.isSame(oldProps.date) || !this.props.otherDate.isSame(oldProps.otherDate)) {\n        this.styleCell();\n      }\n\n      if (!this.props.cellDay.isSame(oldProps.cellDay)) {\n        this.styleCell();\n      } // If a Cell is Selected\n      // If the focusDate is this cell\n      // and its not a gray cell\n      // Then Focus on this cell\n\n\n      var cellFocused = false;\n      var focusDateIsCellDate = _typeof(this.props.focusDate) === \"object\" && this.props.focusDate.isSame(this.props.cellDay, \"day\");\n\n      if (document.activeElement.id === \"cell\") {\n        cellFocused = true;\n      }\n\n      if (cellFocused && focusDateIsCellDate && !this.shouldStyleCellGrey(this.props.cellDay)) {\n        this.cell.focus();\n        this.props.focusOnCallback(false);\n      }\n    }\n  }, {\n    key: \"pastMaxDatePropsChecker\",\n    value: function pastMaxDatePropsChecker(isCellDateProp, days) {\n      if (isCellDateProp) {\n        if ((0, _DateSelectedUtils.pastMaxDate)((0, _moment.default)(this.props.date).add(days, \"days\"), this.props.maxDate, true)) {\n          return true;\n        }\n      } else {\n        if ((0, _DateSelectedUtils.pastMaxDate)((0, _moment.default)(this.props.otherDate).add(days, \"days\"), this.props.maxDate, true)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"keyDown\",\n    value: function keyDown(e) {\n      var componentFocused = document.activeElement === _reactDom.default.findDOMNode(this.cell);\n\n      if (componentFocused && e.keyCode >= 37 && e.keyCode <= 40) {\n        e.preventDefault();\n        var newDate = (0, _moment.default)(this.props.cellDay); // Check to see if this cell is the date prop\n\n        var isCellDateProp = this.props.cellDay.isSame(this.props.date, \"day\");\n\n        if (e.keyCode === 38) {\n          // Up Key\n          newDate.subtract(7, \"days\");\n        } else if (e.keyCode === 40) {\n          // Down Key\n          if (this.pastMaxDatePropsChecker(isCellDateProp, 7)) {\n            return;\n          }\n\n          newDate.add(7, \"days\");\n        } else if (e.keyCode === 37) {\n          // Left Key\n          newDate.subtract(1, \"days\");\n        } else if (e.keyCode === 39) {\n          // Right Key\n          if (this.pastMaxDatePropsChecker(isCellDateProp, 1)) {\n            return;\n          }\n\n          newDate.add(1, \"days\");\n        }\n\n        this.props.keyboardCellCallback(this.props.cellDay, newDate);\n        this.props.focusOnCallback(newDate);\n      }\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick() {\n      if ((0, _DateSelectedUtils.pastMaxDate)(this.props.cellDay, this.props.maxDate, false)) {\n        return;\n      }\n\n      this.props.dateSelectedNoTimeCallback(this.props.cellDay);\n    }\n  }, {\n    key: \"mouseEnter\",\n    value: function mouseEnter() {\n      // If Past Max Date Style Cell Out of Use\n      if (this.checkAndSetMaxDateStyle(this.props.cellDay)) {\n        return;\n      } // Hover Style Cell, Different if inbetween start and end date\n\n\n      var isDateStart = this.props.date.isSameOrBefore(this.props.otherDate, \"minute\");\n\n      if ((0, _TimeFunctionUtils.isInbetweenDates)(isDateStart, this.props.cellDay, this.props.date, this.props.otherDate)) {\n        this.setState({\n          \"style\": (0, _TimeFunctionUtils.hoverCellStyle)(true)\n        });\n      } else {\n        this.setState({\n          \"style\": (0, _TimeFunctionUtils.hoverCellStyle)()\n        });\n      }\n    }\n  }, {\n    key: \"mouseLeave\",\n    value: function mouseLeave() {\n      this.styleCell();\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      this.props.cellFocusedCallback(this.props.cellDay);\n      this.setState({\n        focus: true\n      });\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      this.setState({\n        focus: false\n      });\n    }\n  }, {\n    key: \"shouldStyleCellGrey\",\n    value: function shouldStyleCellGrey(cellDay) {\n      var month = this.props.month;\n      var cellDayMonth = cellDay.month();\n\n      if (month !== cellDayMonth) {\n        return true;\n      }\n    }\n  }, {\n    key: \"shouldStyleCellStartEnd\",\n    value: function shouldStyleCellStartEnd(cellDay, date, otherDate, startCheck, endCheck) {\n      var isCellDateProp = cellDay.isSame(date, \"day\");\n      var isCellOtherDateProp = cellDay.isSame(otherDate, \"day\");\n      var isDateStart = date.isSameOrBefore(otherDate, \"minute\");\n      var isOtherDateStart = otherDate.isSameOrBefore(date, \"minute\");\n\n      if (startCheck) {\n        return isCellDateProp && isDateStart || isCellOtherDateProp && isOtherDateStart;\n      } else if (endCheck) {\n        return isCellDateProp && !isDateStart || isCellOtherDateProp && !isOtherDateStart;\n      }\n    }\n  }, {\n    key: \"checkAndSetMaxDateStyle\",\n    value: function checkAndSetMaxDateStyle(cellDate) {\n      if ((0, _DateSelectedUtils.pastMaxDate)(cellDate, this.props.maxDate, false)) {\n        this.setState({\n          \"style\": (0, _TimeFunctionUtils.invalidStyle)()\n        });\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"styleCell\",\n    value: function styleCell() {\n      var cellDay = this.props.cellDay;\n      var date = this.props.date;\n      var otherDate = this.props.otherDate; // If Past Max Date Style Cell Out of Use\n\n      if (this.checkAndSetMaxDateStyle(cellDay)) {\n        return;\n      }\n\n      if (this.shouldStyleCellGrey(cellDay)) {\n        this.setState({\n          \"style\": (0, _TimeFunctionUtils.greyCellStyle)()\n        });\n        return;\n      }\n\n      var isDateStart = date.isSameOrBefore(otherDate, \"minute\");\n      var inbetweenDates = (0, _TimeFunctionUtils.isInbetweenDates)(isDateStart, cellDay, date, otherDate);\n\n      if (this.shouldStyleCellStartEnd(cellDay, date, otherDate, true, false)) {\n        this.setState({\n          \"style\": (0, _TimeFunctionUtils.startDateStyle)()\n        });\n      } else if (this.shouldStyleCellStartEnd(cellDay, date, otherDate, false, true)) {\n        this.setState({\n          \"style\": (0, _TimeFunctionUtils.endDateStyle)()\n        });\n      } else if (inbetweenDates) {\n        this.setState({\n          \"style\": (0, _TimeFunctionUtils.inBetweenStyle)()\n        });\n      } else {\n        this.setState({\n          \"style\": (0, _TimeFunctionUtils.normalCellStyle)()\n        });\n      }\n    }\n  }, {\n    key: \"isStartOrEndDate\",\n    value: function isStartOrEndDate() {\n      var cellDay = this.props.cellDay;\n      var date = this.props.date;\n      var otherDate = this.props.otherDate;\n\n      if (this.shouldStyleCellStartEnd(cellDay, date, otherDate, true, false) || this.shouldStyleCellStartEnd(cellDay, date, otherDate, false, true)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var dateFormatted = this.props.cellDay.format(\"D\");\n      var tabIndex = -1;\n\n      if (this.isStartOrEndDate() && !this.shouldStyleCellGrey(this.props.cellDay)) {\n        document.addEventListener(\"keydown\", this.keyDown, false);\n        tabIndex = 0;\n      } else {\n        document.removeEventListener(\"keydown\", this.keyDown, false);\n      }\n\n      var style = (0, _StyleUtils.addFocusStyle)(this.state.focus, this.state.style);\n      return _react.default.createElement(\"div\", {\n        ref: function ref(cell) {\n          _this2.cell = cell;\n        },\n        className: \"calendarCell\",\n        tabIndex: tabIndex,\n        style: style,\n        onMouseEnter: this.mouseEnter,\n        onMouseLeave: this.mouseLeave,\n        onClick: this.onClick,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        id: \"cell\"\n      }, dateFormatted);\n    }\n  }]);\n\n  return Cell;\n}(_react.default.Component);\n\nvar _default = Cell;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}