{"ast":null,"code":"\"use strict\";\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nif (typeof require === 'function') {\n  var React = require('react');\n}\n\nvar Fragment = React.Fragment ||\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(_Fragment, _React$Component);\n\n  function _Fragment(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.refFn = _this.refFn.bind(_assertThisInitialized(_this));\n    _this.orphans = [];\n    return _this;\n  }\n\n  var _proto = _Fragment.prototype;\n\n  _proto.refFn = function refFn(div) {\n    this.div = div;\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.unwrapChildren();\n    this.div.style.display = 'none';\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    this.unwrapChildren();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.rewrapChildren();\n  };\n\n  _proto.unwrapChildren = function unwrapChildren() {\n    var _this2 = this; // defer first to style calculation to ensure CSS transitions can happen:\n    // https://stackoverflow.com/a/24195559/4956731\n\n\n    setTimeout(function () {\n      // plain js rocks!\n      // https://plainjs.com/javascript/manipulation/unwrap-a-dom-element-35/\n      if (!_this2.div.parentNode) {\n        return;\n      }\n\n      _this2.orphans = [];\n\n      while (_this2.div.firstChild) {\n        _this2.orphans.push(_this2.div.firstChild);\n\n        _this2.div.parentNode.insertBefore(_this2.div.firstChild, _this2.div);\n      }\n    });\n  };\n\n  _proto.rewrapChildren = function rewrapChildren() {\n    if (!(this.div && this.div.parentNode)) {\n      return;\n    }\n\n    for (var _iterator = this.orphans, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var orphan = _ref;\n      this.div.appendChild(orphan);\n    }\n  };\n\n  _proto.render = function render() {\n    // sorry for the side effects! ðŸ˜­\n    this.rewrapChildren();\n    return React.createElement('div', {\n      ref: this.refFn\n    }, this.props.children);\n  };\n\n  return _Fragment;\n}(React.Component);\n\nif (typeof module !== 'undefined' && module) {\n  module.exports = Fragment;\n}","map":null,"metadata":{},"sourceType":"script"}