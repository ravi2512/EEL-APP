{"ast":null,"code":"import _classCallCheck from \"/home/ravi/Desktop/Practice-APP/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ravi/Desktop/Practice-APP/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ravi/Desktop/Practice-APP/app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ravi/Desktop/Practice-APP/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ravi/Desktop/Practice-APP/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/ravi/Desktop/Practice-APP/app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/ravi/Desktop/Practice-APP/app/src/DemoPages/Components/Maps/Examples/VectorMaps/Datasets.js\";\nimport React, { Fragment } from 'react';\nimport { Button } from 'reactstrap';\nimport { ComposableMap, ZoomableGroup, Geographies, Geography } from \"react-simple-maps\";\nimport chroma from \"chroma-js\";\nimport { scaleLinear } from \"d3-scale\";\nimport world from './Static/world-50m-with-population.json';\nvar colorScale = chroma.scale(['#FF6E40', 'FFD740', '#00B8D4']).mode('lch').colors(24);\nvar subregions = [\"Southern Asia\", \"Polynesia\", \"Micronesia\", \"Southern Africa\", \"Central Asia\", \"Melanesia\", \"Western Europe\", \"Central America\", \"Seven seas (open ocean)\", \"Northern Africa\", \"Caribbean\", \"South-Eastern Asia\", \"Eastern Africa\", \"Australia and New Zealand\", \"Eastern Europe\", \"Western Africa\", \"Southern Europe\", \"Eastern Asia\", \"South America\", \"Middle Africa\", \"Antarctica\", \"Northern Europe\", \"Northern America\", \"Western Asia\"];\nvar popScale = scaleLinear().domain([0, 100000000, 1400000000]).range([\"#CFD8DC\", \"#adb5bd\", \"#37474F\"]);\n\nvar VectorMapsDatasets =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(VectorMapsDatasets, _React$Component);\n\n  function VectorMapsDatasets() {\n    var _this;\n\n    _classCallCheck(this, VectorMapsDatasets);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VectorMapsDatasets).call(this));\n    _this.state = {\n      populationData: true\n    };\n    _this.switchToPopulation = _this.switchToPopulation.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.switchToRegions = _this.switchToRegions.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(VectorMapsDatasets, [{\n    key: \"switchToPopulation\",\n    value: function switchToPopulation() {\n      this.setState({\n        populationData: true\n      });\n    }\n  }, {\n    key: \"switchToRegions\",\n    value: function switchToRegions() {\n      this.setState({\n        populationData: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"text-center mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        className: \"mr-1\",\n        onClick: this.switchToPopulation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Population data\"), React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.switchToRegions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"World subregions\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(ComposableMap, {\n        projectionConfig: {\n          scale: 205,\n          rotation: [-11, 0, 0]\n        },\n        width: 980,\n        height: 551,\n        style: {\n          width: \"100%\",\n          height: \"auto\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(ZoomableGroup, {\n        center: [0, 20],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Geographies, {\n        geography: world,\n        disableOptimization: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, function (geographies, projection) {\n        return geographies.map(function (geography, i) {\n          return React.createElement(Geography, {\n            key: \"\".concat(geography.properties.iso_a3, \"-\").concat(i),\n            cacheId: \"\".concat(geography.properties.iso_a3, \"-\").concat(i),\n            geography: geography,\n            projection: projection,\n            onClick: _this2.handleClick,\n            round: true,\n            style: {\n              default: {\n                fill: _this2.state.populationData ? popScale(geography.properties.pop_est) : colorScale[subregions.indexOf(geography.properties.subregion)],\n                stroke: \"#adb5bd\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              hover: {\n                fill: _this2.state.populationData ? \"#263238\" : chroma(colorScale[subregions.indexOf(geography.properties.subregion)]).darken(0.5),\n                stroke: \"#adb5bd\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              pressed: {\n                fill: _this2.state.populationData ? \"#263238\" : chroma(colorScale[subregions.indexOf(geography.properties.subregion)]).brighten(0.5),\n                stroke: \"#adb5bd\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111\n            },\n            __self: this\n          });\n        });\n      })))));\n    }\n  }]);\n\n  return VectorMapsDatasets;\n}(React.Component);\n\nexport { VectorMapsDatasets as default };","map":{"version":3,"sources":["/home/ravi/Desktop/Practice-APP/app/src/DemoPages/Components/Maps/Examples/VectorMaps/Datasets.js"],"names":["React","Fragment","Button","ComposableMap","ZoomableGroup","Geographies","Geography","chroma","scaleLinear","world","colorScale","scale","mode","colors","subregions","popScale","domain","range","VectorMapsDatasets","state","populationData","switchToPopulation","bind","switchToRegions","setState","rotation","width","height","geographies","projection","map","geography","i","properties","iso_a3","handleClick","default","fill","pop_est","indexOf","subregion","stroke","strokeWidth","outline","hover","darken","pressed","brighten","Component"],"mappings":"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","sourcesContent":["import React, {Fragment} from 'react';\r\n\r\nimport {\r\n    Button,\r\n} from 'reactstrap';\r\n\r\nimport {\r\n    ComposableMap,\r\n    ZoomableGroup,\r\n    Geographies,\r\n    Geography,\r\n} from \"react-simple-maps\"\r\nimport chroma from \"chroma-js\"\r\nimport {scaleLinear} from \"d3-scale\"\r\n\r\nimport world from './Static/world-50m-with-population.json';\r\n\r\nconst colorScale = chroma\r\n    .scale([\r\n        '#FF6E40',\r\n        'FFD740',\r\n        '#00B8D4',\r\n    ])\r\n    .mode('lch')\r\n    .colors(24)\r\n\r\nconst subregions = [\r\n    \"Southern Asia\",\r\n    \"Polynesia\",\r\n    \"Micronesia\",\r\n    \"Southern Africa\",\r\n    \"Central Asia\",\r\n    \"Melanesia\",\r\n    \"Western Europe\",\r\n    \"Central America\",\r\n    \"Seven seas (open ocean)\",\r\n    \"Northern Africa\",\r\n    \"Caribbean\",\r\n    \"South-Eastern Asia\",\r\n    \"Eastern Africa\",\r\n    \"Australia and New Zealand\",\r\n    \"Eastern Europe\",\r\n    \"Western Africa\",\r\n    \"Southern Europe\",\r\n    \"Eastern Asia\",\r\n    \"South America\",\r\n    \"Middle Africa\",\r\n    \"Antarctica\",\r\n    \"Northern Europe\",\r\n    \"Northern America\",\r\n    \"Western Asia\",\r\n]\r\n\r\nconst popScale = scaleLinear()\r\n    .domain([0, 100000000, 1400000000])\r\n    .range([\"#CFD8DC\", \"#adb5bd\", \"#37474F\"])\r\n\r\n\r\nexport default class VectorMapsDatasets extends React.Component {\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            populationData: true,\r\n        }\r\n\r\n        this.switchToPopulation = this.switchToPopulation.bind(this)\r\n        this.switchToRegions = this.switchToRegions.bind(this)\r\n    }\r\n\r\n    switchToPopulation() {\r\n        this.setState({populationData: true})\r\n    }\r\n\r\n    switchToRegions() {\r\n        this.setState({populationData: false})\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className=\"text-center mb-2\">\r\n                    <Button color=\"primary\" className=\"mr-1\" onClick={this.switchToPopulation}>\r\n                        {\"Population data\"}\r\n                    </Button>\r\n                    <Button color=\"primary\" onClick={this.switchToRegions}>\r\n                        {\"World subregions\"}\r\n                    </Button>\r\n                </div>\r\n                <div>\r\n                    <ComposableMap\r\n                        projectionConfig={{\r\n                            scale: 205,\r\n                            rotation: [-11, 0, 0],\r\n                        }}\r\n                        width={980}\r\n                        height={551}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"auto\",\r\n                        }}\r\n                    >\r\n                        <ZoomableGroup center={[0, 20]}>\r\n                            <Geographies\r\n                                geography={world}\r\n                                disableOptimization\r\n                            >\r\n                                {(geographies, projection) =>\r\n                                    geographies.map((geography, i) => (\r\n                                        <Geography\r\n                                            key={`${geography.properties.iso_a3}-${i}`}\r\n                                            cacheId={`${geography.properties.iso_a3}-${i}`}\r\n                                            geography={geography}\r\n                                            projection={projection}\r\n                                            onClick={this.handleClick}\r\n                                            round\r\n                                            style={{\r\n                                                default: {\r\n                                                    fill: this.state.populationData\r\n                                                        ? popScale(geography.properties.pop_est)\r\n                                                        : colorScale[subregions.indexOf(geography.properties.subregion)],\r\n                                                    stroke: \"#adb5bd\",\r\n                                                    strokeWidth: 0.75,\r\n                                                    outline: \"none\",\r\n                                                },\r\n                                                hover: {\r\n                                                    fill: this.state.populationData\r\n                                                        ? \"#263238\"\r\n                                                        : chroma(colorScale[subregions.indexOf(geography.properties.subregion)]).darken(0.5),\r\n                                                    stroke: \"#adb5bd\",\r\n                                                    strokeWidth: 0.75,\r\n                                                    outline: \"none\",\r\n                                                },\r\n                                                pressed: {\r\n                                                    fill: this.state.populationData\r\n                                                        ? \"#263238\"\r\n                                                        : chroma(colorScale[subregions.indexOf(geography.properties.subregion)]).brighten(0.5),\r\n                                                    stroke: \"#adb5bd\",\r\n                                                    strokeWidth: 0.75,\r\n                                                    outline: \"none\",\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    ))}\r\n                            </Geographies>\r\n                        </ZoomableGroup>\r\n                    </ComposableMap>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}