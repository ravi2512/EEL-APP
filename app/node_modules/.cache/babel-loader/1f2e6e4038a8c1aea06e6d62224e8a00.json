{"ast":null,"code":"module.exports = formatter;\n\nfunction formatter(options) {\n  options = options || {}; // *********************************************************************************************\n  // Set defaults for negatives\n  // options.negative, options.negativeOut, options.separator retained for backward compatibility\n  // *********************************************************************************************\n  // type of negative; default left\n\n  options.negativeType = options.negativeType || (options.negative === 'R' ? 'right' : 'left'); // negative symbols '-' or '()'\n\n  if (typeof options.negativeLeftSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'left':\n        options.negativeLeftSymbol = '-';\n        break;\n\n      case 'brackets':\n        options.negativeLeftSymbol = '(';\n        break;\n\n      default:\n        options.negativeLeftSymbol = '';\n    }\n  }\n\n  if (typeof options.negativeRightSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'right':\n        options.negativeRightSymbol = '-';\n        break;\n\n      case 'brackets':\n        options.negativeRightSymbol = ')';\n        break;\n\n      default:\n        options.negativeRightSymbol = '';\n    }\n  } // whether negative symbol should be inside/outside prefix and suffix\n\n\n  if (typeof options.negativeLeftOut !== \"boolean\") {\n    options.negativeLeftOut = options.negativeOut === false ? false : true;\n  }\n\n  if (typeof options.negativeRightOut !== \"boolean\") {\n    options.negativeRightOut = options.negativeOut === false ? false : true;\n  } //prefix and suffix\n\n\n  options.prefix = options.prefix || '';\n  options.suffix = options.suffix || ''; //separators\n\n  if (typeof options.integerSeparator !== 'string') {\n    options.integerSeparator = typeof options.separator === 'string' ? options.separator : ',';\n  }\n\n  options.decimalsSeparator = typeof options.decimalsSeparator === 'string' ? options.decimalsSeparator : '';\n  options.decimal = options.decimal || '.'; //padders\n\n  options.padLeft = options.padLeft || -1; //default no padding\n\n  options.padRight = options.padRight || -1; //default no padding\n\n  function format(number, overrideOptions) {\n    overrideOptions = overrideOptions || {};\n\n    if (number || number === 0) {\n      number = '' + number; //convert number to string if it isn't already\n    } else {\n      return '';\n    } //identify a negative number and make it absolute\n\n\n    var output = [];\n    var negative = number.charAt(0) === '-';\n    number = number.replace(/^\\-/g, ''); //Prepare output with left hand negative and/or prefix\n\n    if (!options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n\n    if (negative) {\n      output.push(options.negativeLeftSymbol);\n    }\n\n    if (options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    } //Format core number\n\n\n    number = number.split('.');\n    if (options.round != null) round(number, options.round);\n    if (options.truncate != null) number[1] = truncate(number[1], options.truncate);\n    if (options.padLeft > 0) number[0] = padLeft(number[0], options.padLeft);\n    if (options.padRight > 0) number[1] = padRight(number[1], options.padRight);\n    if (!overrideOptions.noSeparator && number[1]) number[1] = addDecimalSeparators(number[1], options.decimalsSeparator);\n    if (!overrideOptions.noSeparator && number[0]) number[0] = addIntegerSeparators(number[0], options.integerSeparator);\n    output.push(number[0]);\n\n    if (number[1]) {\n      output.push(options.decimal);\n      output.push(number[1]);\n    } //Prepare output with right hand negative and/or prefix\n\n\n    if (options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n\n    if (negative) {\n      output.push(options.negativeRightSymbol);\n    }\n\n    if (!options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    } //join output and return\n\n\n    return output.join('');\n  }\n\n  format.negative = options.negative;\n  format.negativeOut = options.negativeOut;\n  format.negativeType = options.negativeType;\n  format.negativeLeftOut = options.negativeLeftOut;\n  format.negativeLeftSymbol = options.negativeLeftSymbol;\n  format.negativeRightOut = options.negativeRightOut;\n  format.negativeRightSymbol = options.negativeRightSymbol;\n  format.prefix = options.prefix;\n  format.suffix = options.suffix;\n  format.separate = options.separate;\n  format.integerSeparator = options.integerSeparator;\n  format.decimalsSeparator = options.decimalsSeparator;\n  format.decimal = options.decimal;\n  format.padLeft = options.padLeft;\n  format.padRight = options.padRight;\n  format.truncate = options.truncate;\n  format.round = options.round;\n\n  function unformat(number, allowedSeparators) {\n    allowedSeparators = allowedSeparators || [];\n\n    if (options.allowedSeparators) {\n      options.allowedSeparators.forEach(function (s) {\n        allowedSeparators.push(s);\n      });\n    }\n\n    allowedSeparators.push(options.integerSeparator);\n    allowedSeparators.push(options.decimalsSeparator);\n    number = number.replace(options.prefix, '');\n    number = number.replace(options.suffix, '');\n    var newNumber = number;\n\n    do {\n      number = newNumber;\n\n      for (var i = 0; i < allowedSeparators.length; i++) {\n        newNumber = newNumber.replace(allowedSeparators[i], '');\n      }\n    } while (newNumber != number);\n\n    return number;\n  }\n\n  format.unformat = unformat;\n\n  function validate(number, allowedSeparators) {\n    number = unformat(number, allowedSeparators);\n    number = number.split(options.decimal);\n\n    if (number.length > 2) {\n      return false;\n    } else if (options.truncate != null && number[1] && number[1].length > options.truncate) {\n      return false;\n    } else if (options.round != null && number[1] && number[1].length > options.round) {\n      return false;\n    } else {\n      return /^-?\\d+\\.?\\d*$/.test(number);\n    }\n  }\n\n  return format;\n} //where x is already the integer part of the number\n\n\nfunction addIntegerSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d+)(\\d{3})/;\n\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n\n  return x;\n} //where x is already the decimal part of the number\n\n\nfunction addDecimalSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d{3})(\\d+)/;\n\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n\n  return x;\n} //where x is the integer part of the number\n\n\nfunction padLeft(x, padding) {\n  x = x + '';\n  var buf = [];\n\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n\n  return buf.join('') + x;\n} //where x is the decimals part of the number\n\n\nfunction padRight(x, padding) {\n  if (x) {\n    x += '';\n  } else {\n    x = '';\n  }\n\n  var buf = [];\n\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n\n  return x + buf.join('');\n}\n\nfunction truncate(x, length) {\n  if (x) {\n    x += '';\n  }\n\n  if (x && x.length > length) {\n    return x.substr(0, length);\n  } else {\n    return x;\n  }\n} //where number is an array with 0th item as integer string and 1st item as decimal string (no negatives)\n\n\nfunction round(number, places) {\n  if (number[1] && places >= 0 && number[1].length > places) {\n    //truncate to correct number of decimal places\n    var decim = number[1].slice(0, places); //if next digit was >= 5 we need to round up\n\n    if (+number[1].substr(places, 1) >= 5) {\n      //But first count leading zeros as converting to a number will loose them\n      var leadingzeros = \"\";\n\n      while (decim.charAt(0) === \"0\") {\n        leadingzeros = leadingzeros + \"0\";\n        decim = decim.substr(1);\n      } //Then we can change decim to a number and add 1 before replacing leading zeros\n\n\n      decim = +decim + 1 + '';\n      decim = leadingzeros + decim;\n\n      if (decim.length > places) {\n        //adding one has made it longer\n        number[0] = +number[0] + +decim.charAt(0) + ''; //add value of firstchar to the integer part\n\n        decim = decim.substring(1); //ignore the 1st char at the beginning which is the carry to the integer part\n      }\n    }\n\n    number[1] = decim;\n  }\n\n  return number;\n}","map":null,"metadata":{},"sourceType":"script"}