{"ast":null,"code":"import _classCallCheck from \"/home/ravi/Desktop/Practice-APP/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ravi/Desktop/Practice-APP/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ravi/Desktop/Practice-APP/app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ravi/Desktop/Practice-APP/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ravi/Desktop/Practice-APP/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ravi/Desktop/Practice-APP/app/src/DemoPages/Charts/Gauges/Examples/liquidGauge.js\";\nimport { color } from 'd3-color';\nimport { interpolateRgb } from 'd3-interpolate';\nimport React, { Fragment, Component } from 'react';\nimport LiquidFillGauge from 'react-liquid-gauge';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { Row, Col, Card, CardBody, CardTitle, Button } from 'reactstrap';\n\nvar ChartsLiquidGaugeExample =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChartsLiquidGaugeExample, _Component);\n\n  function ChartsLiquidGaugeExample() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ChartsLiquidGaugeExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ChartsLiquidGaugeExample)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      value: 50\n    };\n    _this.startColor = '#6495ed';\n    _this.endColor = '#dc143c';\n    return _this;\n  }\n\n  _createClass(ChartsLiquidGaugeExample, [{\n    key: \"render\",\n    // crimson\n    value: function render() {\n      var _this2 = this;\n\n      var radius = 80;\n      var interpolate = interpolateRgb(this.startColor, this.endColor);\n      var fillColor = interpolate(this.state.value / 100);\n      var gradientStops = [{\n        key: '0%',\n        stopColor: color(fillColor).darker(0.5).toString(),\n        stopOpacity: 1,\n        offset: '0%'\n      }, {\n        key: '50%',\n        stopColor: fillColor,\n        stopOpacity: 0.75,\n        offset: '50%'\n      }, {\n        key: '100%',\n        stopColor: color(fillColor).brighter(0.5).toString(),\n        stopOpacity: 0.5,\n        offset: '100%'\n      }];\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(ReactCSSTransitionGroup, {\n        component: \"div\",\n        transitionName: \"TabsAnimation\",\n        transitionAppear: true,\n        transitionAppearTimeout: 0,\n        transitionEnter: false,\n        transitionLeave: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Card, {\n        className: \"main-card mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(CardTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Liquid Gauges\"), React.createElement(Row, {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: \"6\",\n        lg: \"4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(LiquidFillGauge, {\n        style: {\n          margin: '0 auto'\n        },\n        width: radius,\n        height: radius,\n        value: this.state.value,\n        percent: \"\",\n        textSize: 1,\n        textOffsetX: 0,\n        textOffsetY: 0,\n        textRenderer: function textRenderer(props) {\n          var value = Math.round(props.value);\n          var radius = Math.min(props.height / 2, props.width / 2);\n          var textPixels = props.textSize * radius / 2;\n          var valueStyle = {\n            fontSize: textPixels\n          };\n          var percentStyle = {\n            fontSize: textPixels * 0.6\n          };\n          return React.createElement(\"tspan\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79\n            },\n            __self: this\n          }, React.createElement(\"tspan\", {\n            className: \"value\",\n            style: valueStyle,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80\n            },\n            __self: this\n          }, value), React.createElement(\"tspan\", {\n            style: percentStyle,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81\n            },\n            __self: this\n          }, props.percent));\n        },\n        riseAnimation: true,\n        waveAnimation: true,\n        waveFrequency: 5,\n        waveAmplitude: 3,\n        gradient: true,\n        gradientStops: gradientStops,\n        circleStyle: {\n          fill: fillColor\n        },\n        waveStyle: {\n          fill: fillColor\n        },\n        textStyle: {\n          fill: color('#989fa4').toString()\n        },\n        waveTextStyle: {\n          fill: color('#fff').toString()\n        },\n        onClick: function onClick() {\n          _this2.setState({\n            value: Math.random() * 100\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      })), React.createElement(Col, {\n        md: \"6\",\n        lg: \"4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(LiquidFillGauge, {\n        style: {\n          margin: '0 auto'\n        },\n        width: radius * 1.5,\n        height: radius * 1.5,\n        value: this.state.value,\n        percent: \"\",\n        textSize: 1,\n        textOffsetX: 0,\n        textOffsetY: 0,\n        textRenderer: function textRenderer(props) {\n          var value = Math.round(props.value);\n          var radius = Math.min(props.height / 2, props.width / 2);\n          var textPixels = props.textSize * radius / 2;\n          var valueStyle = {\n            fontSize: textPixels\n          };\n          var percentStyle = {\n            fontSize: textPixels * 0.6\n          };\n          return React.createElement(\"tspan\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 132\n            },\n            __self: this\n          }, React.createElement(\"tspan\", {\n            className: \"value\",\n            style: valueStyle,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133\n            },\n            __self: this\n          }, value), React.createElement(\"tspan\", {\n            style: percentStyle,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134\n            },\n            __self: this\n          }, props.percent));\n        },\n        riseAnimation: true,\n        waveAnimation: true,\n        waveFrequency: 3,\n        waveAmplitude: 4,\n        gradient: true,\n        gradientStops: gradientStops,\n        circleStyle: {\n          fill: fillColor\n        },\n        waveStyle: {\n          fill: fillColor\n        },\n        textStyle: {\n          fill: color('#989fa4').toString()\n        },\n        waveTextStyle: {\n          fill: color('#fff').toString()\n        },\n        onClick: function onClick() {\n          _this2.setState({\n            value: Math.random() * 100\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      })), React.createElement(Col, {\n        md: \"6\",\n        lg: \"4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(LiquidFillGauge, {\n        style: {\n          margin: '0 auto'\n        },\n        width: radius * 2,\n        height: radius * 2,\n        value: this.state.value,\n        percent: \"%\",\n        textSize: 1,\n        textOffsetX: 0,\n        textOffsetY: 0,\n        textRenderer: function textRenderer(props) {\n          var value = Math.round(props.value);\n          var radius = Math.min(props.height / 2, props.width / 2);\n          var textPixels = props.textSize * radius / 2;\n          var valueStyle = {\n            fontSize: textPixels\n          };\n          var percentStyle = {\n            fontSize: textPixels * 0.6\n          };\n          return React.createElement(\"tspan\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 185\n            },\n            __self: this\n          }, React.createElement(\"tspan\", {\n            className: \"value\",\n            style: valueStyle,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 186\n            },\n            __self: this\n          }, value), React.createElement(\"tspan\", {\n            style: percentStyle,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 187\n            },\n            __self: this\n          }, props.percent));\n        },\n        riseAnimation: true,\n        waveAnimation: true,\n        waveFrequency: 3,\n        waveAmplitude: 2,\n        gradient: true,\n        gradientStops: gradientStops,\n        circleStyle: {\n          fill: fillColor\n        },\n        waveStyle: {\n          fill: fillColor\n        },\n        textStyle: {\n          fill: color('#989fa4').toString()\n        },\n        waveTextStyle: {\n          fill: color('#fff').toString()\n        },\n        onClick: function onClick() {\n          _this2.setState({\n            value: Math.random() * 100\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"divider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"button\",\n        color: \"primary\",\n        className: \"btn-wide btn-shadow btn-pill\",\n        onClick: function onClick() {\n          _this2.setState({\n            value: Math.random() * 100\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, \"Refresh\"))))))));\n    }\n  }]);\n\n  return ChartsLiquidGaugeExample;\n}(Component);\n\nexport { ChartsLiquidGaugeExample as default };","map":{"version":3,"sources":["/home/ravi/Desktop/Practice-APP/app/src/DemoPages/Charts/Gauges/Examples/liquidGauge.js"],"names":["color","interpolateRgb","React","Fragment","Component","LiquidFillGauge","ReactCSSTransitionGroup","Row","Col","Card","CardBody","CardTitle","Button","ChartsLiquidGaugeExample","state","value","startColor","endColor","radius","interpolate","fillColor","gradientStops","key","stopColor","darker","toString","stopOpacity","offset","brighter","margin","props","Math","round","min","height","width","textPixels","textSize","valueStyle","fontSize","percentStyle","percent","fill","setState","random"],"mappings":"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","sourcesContent":["import {color} from 'd3-color';\r\nimport {interpolateRgb} from 'd3-interpolate';\r\nimport React, {Fragment, Component} from 'react';\r\nimport LiquidFillGauge from 'react-liquid-gauge';\r\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\r\nimport {\r\n    Row, Col,\r\n    Card, CardBody,\r\n    CardTitle, Button\r\n} from 'reactstrap';\r\n\r\nexport default class ChartsLiquidGaugeExample extends Component {\r\n    state = {\r\n        value: 50\r\n    };\r\n    startColor = '#6495ed'; // cornflowerblue\r\n    endColor = '#dc143c'; // crimson\r\n    render() {\r\n        const radius = 80;\r\n        const interpolate = interpolateRgb(this.startColor, this.endColor);\r\n        const fillColor = interpolate(this.state.value / 100);\r\n        const gradientStops = [\r\n            {\r\n                key: '0%',\r\n                stopColor: color(fillColor).darker(0.5).toString(),\r\n                stopOpacity: 1,\r\n                offset: '0%'\r\n            },\r\n            {\r\n                key: '50%',\r\n                stopColor: fillColor,\r\n                stopOpacity: 0.75,\r\n                offset: '50%'\r\n            },\r\n            {\r\n                key: '100%',\r\n                stopColor: color(fillColor).brighter(0.5).toString(),\r\n                stopOpacity: 0.5,\r\n                offset: '100%'\r\n            }\r\n        ];\r\n        return (\r\n            <Fragment>\r\n                <ReactCSSTransitionGroup\r\n                    component=\"div\"\r\n                    transitionName=\"TabsAnimation\"\r\n                    transitionAppear={true}\r\n                    transitionAppearTimeout={0}\r\n                    transitionEnter={false}\r\n                    transitionLeave={false}>\r\n                    <Row>\r\n                        <Col md=\"12\">\r\n                            <Card className=\"main-card mb-3\">\r\n                                <CardBody>\r\n                                    <CardTitle>Liquid Gauges</CardTitle>\r\n                                    <Row className=\"text-center\">\r\n                                        <Col md=\"6\" lg=\"4\">\r\n                                            <LiquidFillGauge\r\n                                                style={{ margin: '0 auto' }}\r\n                                                width={radius}\r\n                                                height={radius}\r\n                                                value={this.state.value}\r\n                                                percent=\"\"\r\n                                                textSize={1}\r\n                                                textOffsetX={0}\r\n                                                textOffsetY={0}\r\n                                                textRenderer={(props) => {\r\n                                                    const value = Math.round(props.value);\r\n                                                    const radius = Math.min(props.height / 2, props.width / 2);\r\n                                                    const textPixels = (props.textSize * radius / 2);\r\n                                                    const valueStyle = {\r\n                                                        fontSize: textPixels\r\n                                                    };\r\n                                                    const percentStyle = {\r\n                                                        fontSize: textPixels * 0.6\r\n                                                    };\r\n\r\n                                                    return (\r\n                                                        <tspan>\r\n                                                            <tspan className=\"value\" style={valueStyle}>{value}</tspan>\r\n                                                            <tspan style={percentStyle}>{props.percent}</tspan>\r\n                                                        </tspan>\r\n                                                    );\r\n                                                }}\r\n                                                riseAnimation\r\n                                                waveAnimation\r\n                                                waveFrequency={5}\r\n                                                waveAmplitude={3}\r\n                                                gradient\r\n                                                gradientStops={gradientStops}\r\n                                                circleStyle={{\r\n                                                    fill: fillColor\r\n                                                }}\r\n                                                waveStyle={{\r\n                                                    fill: fillColor\r\n                                                }}\r\n                                                textStyle={{\r\n                                                    fill: color('#989fa4').toString(),\r\n                                                    \r\n                                                }}\r\n                                                waveTextStyle={{\r\n                                                    fill: color('#fff').toString(),\r\n                                                    \r\n                                                }}\r\n                                                onClick={() => {\r\n                                                    this.setState({ value: Math.random() * 100 });\r\n                                                }}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md=\"6\" lg=\"4\">\r\n                                            <LiquidFillGauge\r\n                                                style={{ margin: '0 auto' }}\r\n                                                width={radius * 1.5}\r\n                                                height={radius * 1.5}\r\n                                                value={this.state.value}\r\n                                                percent=\"\"\r\n                                                textSize={1}\r\n                                                textOffsetX={0}\r\n                                                textOffsetY={0}\r\n                                                textRenderer={(props) => {\r\n                                                    const value = Math.round(props.value);\r\n                                                    const radius = Math.min(props.height / 2, props.width / 2);\r\n                                                    const textPixels = (props.textSize * radius / 2);\r\n                                                    const valueStyle = {\r\n                                                        fontSize: textPixels\r\n                                                    };\r\n                                                    const percentStyle = {\r\n                                                        fontSize: textPixels * 0.6\r\n                                                    };\r\n\r\n                                                    return (\r\n                                                        <tspan>\r\n                                                            <tspan className=\"value\" style={valueStyle}>{value}</tspan>\r\n                                                            <tspan style={percentStyle}>{props.percent}</tspan>\r\n                                                        </tspan>\r\n                                                    );\r\n                                                }}\r\n                                                riseAnimation\r\n                                                waveAnimation\r\n                                                waveFrequency={3}\r\n                                                waveAmplitude={4}\r\n                                                gradient\r\n                                                gradientStops={gradientStops}\r\n                                                circleStyle={{\r\n                                                    fill: fillColor\r\n                                                }}\r\n                                                waveStyle={{\r\n                                                    fill: fillColor\r\n                                                }}\r\n                                                textStyle={{\r\n                                                    fill: color('#989fa4').toString(),\r\n                                                    \r\n                                                }}\r\n                                                waveTextStyle={{\r\n                                                    fill: color('#fff').toString(),\r\n                                                    \r\n                                                }}\r\n                                                onClick={() => {\r\n                                                    this.setState({ value: Math.random() * 100 });\r\n                                                }}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md=\"6\" lg=\"4\">\r\n                                            <LiquidFillGauge\r\n                                                style={{ margin: '0 auto' }}\r\n                                                width={radius * 2}\r\n                                                height={radius * 2}\r\n                                                value={this.state.value}\r\n                                                percent=\"%\"\r\n                                                textSize={1}\r\n                                                textOffsetX={0}\r\n                                                textOffsetY={0}\r\n                                                textRenderer={(props) => {\r\n                                                    const value = Math.round(props.value);\r\n                                                    const radius = Math.min(props.height / 2, props.width / 2);\r\n                                                    const textPixels = (props.textSize * radius / 2);\r\n                                                    const valueStyle = {\r\n                                                        fontSize: textPixels\r\n                                                    };\r\n                                                    const percentStyle = {\r\n                                                        fontSize: textPixels * 0.6\r\n                                                    };\r\n\r\n                                                    return (\r\n                                                        <tspan>\r\n                                                            <tspan className=\"value\" style={valueStyle}>{value}</tspan>\r\n                                                            <tspan style={percentStyle}>{props.percent}</tspan>\r\n                                                        </tspan>\r\n                                                    );\r\n                                                }}\r\n                                                riseAnimation\r\n                                                waveAnimation\r\n                                                waveFrequency={3}\r\n                                                waveAmplitude={2}\r\n                                                gradient\r\n                                                gradientStops={gradientStops}\r\n                                                circleStyle={{\r\n                                                    fill: fillColor\r\n                                                }}\r\n                                                waveStyle={{\r\n                                                    fill: fillColor\r\n                                                }}\r\n                                                textStyle={{\r\n                                                    fill: color('#989fa4').toString(),\r\n                                                    \r\n                                                }}\r\n                                                waveTextStyle={{\r\n                                                    fill: color('#fff').toString(),\r\n                                                    \r\n                                                }}\r\n                                                onClick={() => {\r\n                                                    this.setState({ value: Math.random() * 100 });\r\n                                                }}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <div className=\"divider\"/>\r\n                                    <div className=\"text-center\">\r\n                                        <Button\r\n                                            type=\"button\"\r\n                                            color=\"primary\" className=\"btn-wide btn-shadow btn-pill\"\r\n                                            onClick={() => {\r\n                                                this.setState({ value: Math.random() * 100 });\r\n                                            }}\r\n                                        >\r\n                                            Refresh\r\n                                        </Button>\r\n                                    </div>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </ReactCSSTransitionGroup>\r\n            </Fragment>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}