{"ast":null,"code":"import _classCallCheck from \"/home/ravi/Desktop/Practice-APP/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ravi/Desktop/Practice-APP/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ravi/Desktop/Practice-APP/app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ravi/Desktop/Practice-APP/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ravi/Desktop/Practice-APP/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/ravi/Desktop/Practice-APP/app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/ravi/Desktop/Practice-APP/app/src/DemoPages/Components/TooltipsPopovers/Examples/Tooltips/TooltipLight.js\";\nimport React, { Fragment } from 'react';\nimport { Button, Tooltip } from 'reactstrap';\n\nvar TooltipItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TooltipItem, _React$Component);\n\n  function TooltipItem(props) {\n    var _this;\n\n    _classCallCheck(this, TooltipItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TooltipItem).call(this, props));\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      tooltipOpen: false\n    };\n    return _this;\n  }\n\n  _createClass(TooltipItem, [{\n    key: \"toggle\",\n    value: function toggle() {\n      this.setState({\n        tooltipOpen: !this.state.tooltipOpen\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"mr-2 mb-2\",\n        color: \"primary\",\n        id: 'TooltipLight-' + this.props.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, this.props.item.text), React.createElement(Tooltip, {\n        className: \"tooltip-light\",\n        placement: this.props.item.placement,\n        isOpen: this.state.tooltipOpen,\n        target: 'TooltipLight-' + this.props.id,\n        toggle: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"Tooltip Content!\"));\n    }\n  }]);\n\n  return TooltipItem;\n}(React.Component);\n\nvar TooltipExampleLight =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(TooltipExampleLight, _React$Component2);\n\n  function TooltipExampleLight(props) {\n    var _this2;\n\n    _classCallCheck(this, TooltipExampleLight);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(TooltipExampleLight).call(this, props));\n    _this2.state = {\n      tooltips: [{\n        placement: 'auto',\n        text: 'auto'\n      }, {\n        placement: 'top',\n        text: 'top'\n      }, {\n        placement: 'right',\n        text: 'right'\n      }, {\n        placement: 'bottom',\n        text: 'bottom'\n      }, {\n        placement: 'left',\n        text: 'left'\n      }]\n    };\n    return _this2;\n  }\n\n  _createClass(TooltipExampleLight, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, this.state.tooltips.map(function (tooltip, i) {\n        return React.createElement(TooltipItem, {\n          key: i,\n          item: tooltip,\n          id: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return TooltipExampleLight;\n}(React.Component);\n\nexport default TooltipExampleLight;","map":{"version":3,"sources":["/home/ravi/Desktop/Practice-APP/app/src/DemoPages/Components/TooltipsPopovers/Examples/Tooltips/TooltipLight.js"],"names":["React","Fragment","Button","Tooltip","TooltipItem","props","toggle","bind","state","tooltipOpen","setState","id","item","text","placement","Component","TooltipExampleLight","tooltips","map","tooltip","i"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,MAAR,EAAgBC,OAAhB,QAA8B,YAA9B;;IAEMC,W;;;;;AACF,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,qFAAMA,KAAN;AAEA,UAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,uDAAd;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE;AADJ,KAAb;AAJe;AAOlB;;;;6BAEQ;AACL,WAAKC,QAAL,CAAc;AACVD,QAAAA,WAAW,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADf,OAAd;AAGH;;;6BAEQ;AACL,aACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,WAAlB;AAA8B,QAAA,KAAK,EAAC,SAApC;AAA8C,QAAA,EAAE,EAAE,kBAAkB,KAAKJ,KAAL,CAAWM,EAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKN,KAAL,CAAWO,IAAX,CAAgBC,IADrB,CADJ,EAII,oBAAC,OAAD;AAAS,QAAA,SAAS,EAAC,eAAnB;AAAmC,QAAA,SAAS,EAAE,KAAKR,KAAL,CAAWO,IAAX,CAAgBE,SAA9D;AAAyE,QAAA,MAAM,EAAE,KAAKN,KAAL,CAAWC,WAA5F;AACS,QAAA,MAAM,EAAE,kBAAkB,KAAKJ,KAAL,CAAWM,EAD9C;AACkD,QAAA,MAAM,EAAE,KAAKL,MAD/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAJJ,CADJ;AAWH;;;;EA5BqBN,KAAK,CAACe,S;;IA+B1BC,mB;;;;;AACF,+BAAYX,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8FAAMA,KAAN;AAEA,WAAKG,KAAL,GAAa;AACTS,MAAAA,QAAQ,EAAE,CACN;AACIH,QAAAA,SAAS,EAAE,MADf;AAEID,QAAAA,IAAI,EAAE;AAFV,OADM,EAKN;AACIC,QAAAA,SAAS,EAAE,KADf;AAEID,QAAAA,IAAI,EAAE;AAFV,OALM,EASN;AACIC,QAAAA,SAAS,EAAE,OADf;AAEID,QAAAA,IAAI,EAAE;AAFV,OATM,EAaN;AACIC,QAAAA,SAAS,EAAE,QADf;AAEID,QAAAA,IAAI,EAAE;AAFV,OAbM,EAiBN;AACIC,QAAAA,SAAS,EAAE,MADf;AAEID,QAAAA,IAAI,EAAE;AAFV,OAjBM;AADD,KAAb;AAHe;AA2BlB;;;;6BAEQ;AACL,aACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKL,KAAL,CAAWS,QAAX,CAAoBC,GAApB,CAAwB,UAACC,OAAD,EAAUC,CAAV,EAAgB;AACrC,eAAO,oBAAC,WAAD;AAAa,UAAA,GAAG,EAAEA,CAAlB;AAAqB,UAAA,IAAI,EAAED,OAA3B;AAAoC,UAAA,EAAE,EAAEC,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OAFA,CADL,CADJ;AAOH;;;;EAtC6BpB,KAAK,CAACe,S;;AAyCxC,eAAeC,mBAAf","sourcesContent":["import React, {Fragment} from 'react';\r\nimport {Button, Tooltip} from 'reactstrap';\r\n\r\nclass TooltipItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n            tooltipOpen: false\r\n        };\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            tooltipOpen: !this.state.tooltipOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Button className=\"mr-2 mb-2\" color=\"primary\" id={'TooltipLight-' + this.props.id}>\r\n                    {this.props.item.text}\r\n                </Button>\r\n                <Tooltip className=\"tooltip-light\" placement={this.props.item.placement} isOpen={this.state.tooltipOpen}\r\n                         target={'TooltipLight-' + this.props.id} toggle={this.toggle}>\r\n                    Tooltip Content!\r\n                </Tooltip>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nclass TooltipExampleLight extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            tooltips: [\r\n                {\r\n                    placement: 'auto',\r\n                    text: 'auto'\r\n                },\r\n                {\r\n                    placement: 'top',\r\n                    text: 'top'\r\n                },\r\n                {\r\n                    placement: 'right',\r\n                    text: 'right'\r\n                },\r\n                {\r\n                    placement: 'bottom',\r\n                    text: 'bottom'\r\n                },\r\n                {\r\n                    placement: 'left',\r\n                    text: 'left'\r\n                },\r\n            ]\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-center\">\r\n                {this.state.tooltips.map((tooltip, i) => {\r\n                    return <TooltipItem key={i} item={tooltip} id={i}/>;\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TooltipExampleLight;\r\n"]},"metadata":{},"sourceType":"module"}