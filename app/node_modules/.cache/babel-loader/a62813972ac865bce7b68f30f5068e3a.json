{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.invalidStyle = exports.greyCellStyle = exports.hoverCellStyle = exports.normalCellStyle = exports.inBetweenStyle = exports.endDateStyle = exports.startDateStyle = exports.isValidTimeChange = exports.isInbetweenDates = exports.getFourtyTwoDays = exports.getYear = exports.getMonth = exports.generateMinutes = exports.generateHours = void 0;\n\nvar _DateTimeRangePicker = require(\"../DateTimeRangePicker\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar generateHours = function generateHours() {\n  var hours = [];\n\n  for (var i = 0; i < 24; i++) {\n    hours.push(i);\n  }\n\n  return hours;\n};\n\nexports.generateHours = generateHours;\n\nvar generateMinutes = function generateMinutes() {\n  var minutes = [];\n\n  for (var i = 0; i < 60; i++) {\n    if (i < 10) {\n      minutes.push(\"0\" + i.toString());\n    } else {\n      minutes.push(i.toString());\n    }\n  }\n\n  return minutes;\n};\n\nexports.generateMinutes = generateMinutes;\n\nfunction workOutMonthYear(date, secondDate, mode) {\n  // If both months are different months then\n  // allow normal display in the calendar\n  var selectedMonth = date.month();\n  var otherMonth = secondDate.month();\n\n  if (selectedMonth !== otherMonth) {\n    return date;\n  } // If both months are the same and the same year \n  // have \"end\"/right as the month and \"start\"/left as -1 month\n  else if (date.year() === secondDate.year() && mode === _DateTimeRangePicker.ModeEnum.start) {\n      var lastMonth = JSON.parse(JSON.stringify(date));\n      lastMonth = (0, _moment.default)(lastMonth);\n      lastMonth.subtract(1, \"month\");\n      return lastMonth;\n    } else {\n      return date;\n    }\n}\n\nvar getMonth = function getMonth(date, secondDate, mode) {\n  return workOutMonthYear(date, secondDate, mode).month();\n};\n\nexports.getMonth = getMonth;\n\nvar getYear = function getYear(date, secondDate, mode) {\n  return workOutMonthYear(date, secondDate, mode).year();\n};\n\nexports.getYear = getYear;\n\nvar getDaysBeforeStartMonday = function getDaysBeforeStartMonday(firstDayOfMonth) {\n  var fourtyTwoDays = [];\n  var dayBeforeFirstDayOfMonth = firstDayOfMonth.day() - 1; // We dont want to include the first day of the new month\n  // Case whereby day before is a Saturday (6) and we require Saturday back to Monday for that week\n\n  if (dayBeforeFirstDayOfMonth === -1) {\n    for (var i = 6; i > 0; i--) {\n      var firstDayOfMonthCopy = firstDayOfMonth.clone();\n      firstDayOfMonthCopy = firstDayOfMonthCopy.subtract(i, 'd');\n      fourtyTwoDays.push(firstDayOfMonthCopy);\n    }\n  } // Case Whereby day before first day is the Sunday (0), therefore we want the entire previous week\n\n\n  if (dayBeforeFirstDayOfMonth === 0) {\n    for (var _i = 7; _i > 0; _i--) {\n      var _firstDayOfMonthCopy = firstDayOfMonth.clone();\n\n      _firstDayOfMonthCopy = _firstDayOfMonthCopy.subtract(_i, 'd');\n      fourtyTwoDays.push(_firstDayOfMonthCopy);\n    }\n  } // Every other day\n  else {\n      for (var _i2 = dayBeforeFirstDayOfMonth; _i2 > 0; _i2--) {\n        var _firstDayOfMonthCopy2 = firstDayOfMonth.clone();\n\n        _firstDayOfMonthCopy2 = _firstDayOfMonthCopy2.subtract(_i2, 'd');\n        fourtyTwoDays.push(_firstDayOfMonthCopy2);\n      }\n    }\n\n  return fourtyTwoDays;\n};\n\nvar getDaysBeforeStartSunday = function getDaysBeforeStartSunday(firstDayOfMonth) {\n  var fourtyTwoDays = [];\n  var dayBeforeFirstDayOfMonth = firstDayOfMonth.day() - 1; // We dont want to include the first day of the new month\n  // Case whereby we need all previous week days\n\n  if (dayBeforeFirstDayOfMonth === -1) {\n    for (var i = 7; i > 0; i--) {\n      var firstDayOfMonthCopy = firstDayOfMonth.clone();\n      firstDayOfMonthCopy = firstDayOfMonthCopy.subtract(i, 'd');\n      fourtyTwoDays.push(firstDayOfMonthCopy);\n    }\n  } // Every other day\n  else {\n      for (var _i3 = dayBeforeFirstDayOfMonth + 1; _i3 > 0; _i3--) {\n        var _firstDayOfMonthCopy3 = firstDayOfMonth.clone();\n\n        _firstDayOfMonthCopy3 = _firstDayOfMonthCopy3.subtract(_i3, 'd');\n        fourtyTwoDays.push(_firstDayOfMonthCopy3);\n      }\n    }\n\n  return fourtyTwoDays;\n};\n\nvar getDaysBeforeStart = function getDaysBeforeStart(firstDayOfMonth, sundayFirst) {\n  if (!sundayFirst) {\n    return getDaysBeforeStartMonday(firstDayOfMonth);\n  } else {\n    return getDaysBeforeStartSunday(firstDayOfMonth);\n  }\n};\n\nvar getFourtyTwoDays = function getFourtyTwoDays(initMonth, initYear, sundayFirst) {\n  var fourtyTwoDays = [];\n  var firstDayOfMonth = (0, _moment.default)(new Date(initYear, initMonth, 1));\n  fourtyTwoDays = getDaysBeforeStart(firstDayOfMonth, sundayFirst); // Add in all days this month\n\n  for (var i = 0; i < firstDayOfMonth.daysInMonth(); i++) {\n    fourtyTwoDays.push(firstDayOfMonth.clone().add(i, 'd'));\n  } // Add in all days at the end of the month until last day of week seen\n\n\n  var lastDayOfMonth = (0, _moment.default)(new Date(initYear, initMonth, firstDayOfMonth.daysInMonth()));\n  var toAdd = 1;\n  var gotAllDays = false;\n\n  while (!gotAllDays) {\n    if (fourtyTwoDays.length >= 42) {\n      gotAllDays = true;\n      break;\n    }\n\n    fourtyTwoDays.push(lastDayOfMonth.clone().add(toAdd, 'd'));\n    toAdd++;\n  }\n\n  return fourtyTwoDays;\n};\n\nexports.getFourtyTwoDays = getFourtyTwoDays;\n\nvar isInbetweenDates = function isInbetweenDates(isStartDate, dayToFindOut, start, end) {\n  var isInBetweenDates;\n\n  if (isStartDate) {\n    isInBetweenDates = dayToFindOut.isAfter(start) && dayToFindOut.isBefore(end);\n  } else {\n    isInBetweenDates = dayToFindOut.isBefore(start) && dayToFindOut.isAfter(end);\n  }\n\n  return isInBetweenDates;\n};\n\nexports.isInbetweenDates = isInbetweenDates;\n\nvar isValidTimeChange = function isValidTimeChange(mode, date, start, end) {\n  var modeStartAndDateSameOrBeforeStart = mode === \"start\" && date.isSameOrBefore(end);\n  var modeEndAndDateSameOrAfterEnd = mode === \"end\" && date.isSameOrAfter(start);\n  return modeStartAndDateSameOrBeforeStart || modeEndAndDateSameOrAfterEnd;\n};\n\nexports.isValidTimeChange = isValidTimeChange;\n\nvar startDateStyle = function startDateStyle() {\n  return {\n    borderRadius: \"4px 0 0 4px\",\n    borderColour: \"transparent\",\n    color: \"#fff\",\n    backgroundColor: \"#357abd\",\n    cursor: \"pointer\"\n  };\n};\n\nexports.startDateStyle = startDateStyle;\n\nvar endDateStyle = function endDateStyle() {\n  return {\n    borderRadius: \"0 4px 4px 0\",\n    borderColour: \"transparent\",\n    color: \"#fff\",\n    backgroundColor: \"#357abd\",\n    cursor: \"pointer\"\n  };\n};\n\nexports.endDateStyle = endDateStyle;\n\nvar inBetweenStyle = function inBetweenStyle() {\n  return {\n    borderRadius: \"0\",\n    borderColour: \"transparent\",\n    color: \"#000\",\n    backgroundColor: \"#ebf4f8\",\n    cursor: \"pointer\"\n  };\n};\n\nexports.inBetweenStyle = inBetweenStyle;\n\nvar normalCellStyle = function normalCellStyle() {\n  return {\n    borderRadius: \"0 0 0 0\",\n    borderColour: \"transparent\",\n    color: \"black\",\n    backgroundColor: \"\"\n  };\n};\n\nexports.normalCellStyle = normalCellStyle;\n\nvar hoverCellStyle = function hoverCellStyle(between) {\n  var borderRadius = \"4px 4px 4px 4px\";\n\n  if (between) {\n    borderRadius = \"0 0 0 0\";\n  }\n\n  return {\n    borderRadius: borderRadius,\n    borderColour: \"transparent\",\n    color: \"inherit\",\n    backgroundColor: \"#eee\",\n    cursor: \"pointer\"\n  };\n};\n\nexports.hoverCellStyle = hoverCellStyle;\n\nvar greyCellStyle = function greyCellStyle() {\n  var borderRadius = \"4px 4px 4px 4px\";\n  return {\n    borderRadius: borderRadius,\n    borderColour: \"transparent\",\n    color: \"#999\",\n    backgroundColor: \"#fff\",\n    cursor: \"pointer\",\n    opacity: \"0.25\"\n  };\n};\n\nexports.greyCellStyle = greyCellStyle;\n\nvar invalidStyle = function invalidStyle() {\n  var style = greyCellStyle();\n  style.cursor = \"not-allowed\";\n  return style;\n};\n\nexports.invalidStyle = invalidStyle;","map":null,"metadata":{},"sourceType":"script"}