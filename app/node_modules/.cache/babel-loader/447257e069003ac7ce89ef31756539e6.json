{"ast":null,"code":"'use strict';\n\nexports = module.exports = function deconstructNumberFormat(requiredFormat) {\n  var format = requiredFormat || '-9,999.90';\n  format = format.trim(); //ignore leading and trailing spaces\n  // *********************************************************************************\n  // find position and type of negative and contents of prefix and suffix text\n  // *********************************************************************************\n\n  var negativeType = '',\n      negativeRightSymbol = '',\n      negativeLeftSymbol = '',\n      negativeRightPos = -1,\n      negativeLeftPos = -1,\n      absFormat,\n      prefix = '',\n      suffix = ''; // brackets as negative\n\n  if (/^([^()]+)?[(]([^09#]+)?[09#., ]+([^)]+)?[)](.+)?$/.test(format)) {\n    negativeType = 'brackets';\n    negativeLeftPos = format.indexOf(\"(\");\n    negativeLeftSymbol = '(';\n\n    if (negativeLeftPos > 0) {\n      //after prefix\n      prefix = format.slice(0, negativeLeftPos);\n    } else {\n      prefix = format.search(/0|9|#/) > 0 ? format.slice(1, format.search(/0|9|#/)) : \"\";\n    }\n\n    format = format.slice(prefix.length + 1);\n    negativeRightPos = format.indexOf(\")\");\n    negativeRightSymbol = ')';\n\n    if (negativeRightPos < format.length - 1) {\n      //before prefix\n      suffix = format.slice(negativeRightPos + 1);\n      format = format.slice(0, negativeRightPos);\n    } else {\n      suffix = format.search(/[^09#,.]([^09#](.+)?)?[)]$/) > -1 ? format.slice(format.search(/[^09#,.]([^09#](.+)?)?[)]$/), -1) : \"\";\n      format = format.slice(0, format.length - suffix.length - 1);\n      negativeRightPos = 0;\n    }\n  } else if (format.indexOf(\"-\") === -1) {\n    //positive values only\n    negativeType = 'none';\n    prefix = format.search(/[.,]?[09#]/) > 0 ? format.slice(0, format.search(/[.,]?[09#]/)) : \"\";\n    format = format.slice(prefix.length);\n    suffix = format.search(/[^09#,.]([^09#]+|$)/) > -1 ? format.slice(format.search(/[^09#,.]([^09#]+|$)/)) : \"\";\n    format = format.slice(0, format.length - suffix.length);\n  } else if (/^([^09#-]+)?-.+$/.test(format)) {\n    //negative symbol to left of number (before or after prefix)\n    negativeType = 'left';\n    negativeLeftPos = format.indexOf(\"-\");\n    negativeLeftSymbol = '-';\n\n    if (negativeLeftPos > 0) {\n      //after prefix\n      prefix = format.slice(0, negativeLeftPos);\n    } else {\n      prefix = format.search(/[09#]/) > 0 ? format.slice(1, format.search(/[09#]/)) : \"\";\n    }\n\n    format = format.slice(prefix.length + 1);\n    suffix = format.search(/[^09#,.]([^09#]+|$)/) > -1 ? format.slice(format.search(/[^09#,.]([^09#]+|$)/)) : \"\";\n    format = format.slice(0, format.length - suffix.length);\n  } else {\n    //negative symbol to right of number (before or after suffix)\n    prefix = format.search(/[09#]/) > 0 ? format.slice(0, format.search(/[09#]/)) : \"\";\n    format = format.slice(prefix.length);\n    negativeType = 'right';\n    negativeRightSymbol = '-';\n    negativeRightPos = format.lastIndexOf(\"-\");\n\n    if (negativeRightPos < format.length - 1) {\n      //before suffix\n      suffix = format.slice(negativeRightPos + 1);\n      format = format.slice(0, negativeRightPos);\n    } else {\n      suffix = format.search(/[^09#,.]([^09#](.+)?)?-$/) > -1 ? format.slice(format.search(/[^09#,.]([^09#](.+)?)?-$/), format.length - 1) : \"\";\n      format = format.slice(0, format.length - suffix.length - 1);\n      negativeRightPos = 0;\n    }\n  } // *********************************************************************************\n  //include spaces with negative symbols\n  // *********************************************************************************\n  //When negative is before prefix move spaces from start of prefix to end of negative symbol\n\n\n  while (negativeLeftPos === 0 && prefix && prefix[0] === ' ') {\n    negativeLeftSymbol = negativeLeftSymbol + ' ';\n    prefix = prefix.slice(1);\n  } //When negative follows suffix move spaces end of suffix to start of negative symbol\n\n\n  while (negativeRightPos === 0 && suffix && suffix[suffix.length - 1] === ' ') {\n    negativeRightSymbol = ' ' + negativeRightSymbol;\n    suffix = suffix.slice(0, -1);\n  } //When negative follows prefix move spaces from start of format to end of negative symbol\n\n\n  while (negativeLeftPos > 0 && format.length && format[0] === ' ') {\n    negativeLeftSymbol = negativeLeftSymbol + ' ';\n    format = format.slice(1);\n  } //When negative before suffix move spaces from end of format to start of negative symbol\n\n\n  while (negativeRightPos > 0 && format.length && format[format.length - 1] === ' ') {\n    negativeRightSymbol = ' ' + negativeRightSymbol;\n    format = format.slice(0, -1);\n  }\n\n  var absMask = format; // *********************************************************************************\n  //find the decimal character and parts of absolute format\n  // *********************************************************************************\n\n  var decimalChar = '',\n      decimalsPart = '',\n      integerPart = '',\n      decimalsSeparator = '',\n      integerSeparator = ''; //if last char is a ',' and there are no other commas then use this as decimal point\n\n  if (format[format.length - 1] === ',' && format.indexOf(',') === format.length - 1) {\n    decimalChar = ','; //otherwise use consider '.'\n  } else if (format.indexOf('.') > -1) {\n    if (format.indexOf('.') === format.lastIndexOf('.')) {\n      decimalChar = \".\";\n    } else {\n      // two of '.' means this must be the separator, so assume  ',' is the decimal\n      decimalChar = ',';\n    } //otherwise use ',' if it exists and there is only one\n\n  } else if (format.indexOf(',') > -1) {\n    if (format.indexOf(',') === format.lastIndexOf(',')) {\n      decimalChar = ',';\n    } else {\n      decimalChar = '.';\n    }\n  }\n\n  if (decimalChar && format.indexOf(decimalChar) > -1) {\n    decimalsPart = format.slice(format.indexOf(decimalChar) + 1);\n    integerPart = format.slice(0, format.indexOf(decimalChar));\n  } else {\n    integerPart = format;\n    decimalsPart = '';\n  }\n\n  while (decimalsPart.length && decimalsPart.search(/[., ]$/) > -1) {\n    decimalsPart = decimalsPart.slice(0, -1);\n  }\n\n  while (integerPart.length && integerPart[0].search(/[., ]/) > -1) {\n    integerPart = integerPart.slice(1);\n  } //find the thousands/thousanths separators\n\n\n  if (integerPart && integerPart.search(/[., ]/) > 0) {\n    integerSeparator = integerPart[integerPart.search(/[., ]/)];\n    integerPart = integerPart.replace(/[., ]/g, \"\");\n  }\n\n  if (decimalsPart && decimalsPart.search(/[., ]/) > 0) {\n    decimalsSeparator = decimalsPart[decimalsPart.search(/[., ]/)];\n    decimalsPart = decimalsPart.replace(/[., ]/g, \"\");\n  }\n\n  if (integerPart.length && !/^[09#]+$/.test(integerPart) || decimalsPart.length && !/^[09#]+$/.test(decimalsPart)) {\n    return false;\n  }\n\n  ; // *********************************************************************************\n  //resolve length and padding\n  // *********************************************************************************\n\n  var padLeft, maxLeft, padRight, maxRight;\n  padLeft = integerPart.indexOf(\"0\") >= 0 ? integerPart.length - integerPart.indexOf(\"0\") : -1;\n  maxLeft = integerPart.length === 0 || integerPart[0] === \"0\" || integerPart[0] === \"9\" ? integerPart.length : -1;\n  padRight = decimalsPart.indexOf(\"0\") >= 0 ? decimalsPart.lastIndexOf(\"0\") + 1 : -1;\n  maxRight = decimalsPart.length === 0 || decimalsPart[decimalsPart.length - 1] === \"0\" || decimalsPart[decimalsPart.length - 1] === \"9\" ? decimalsPart.length : -1; // *********************************************************************************\n  // output\n  // *********************************************************************************\n\n  var deconstructedFormat = {\n    negativeType: negativeType,\n    negativeLeftPos: negativeLeftPos,\n    negativeRightPos: negativeRightPos,\n    negativeLeftSymbol: negativeLeftSymbol,\n    negativeRightSymbol: negativeRightSymbol,\n    suffix: suffix,\n    prefix: prefix,\n    absMask: absMask,\n    decimalChar: decimalChar,\n    integerSeparator: integerSeparator,\n    decimalsSeparator: decimalsSeparator,\n    padLeft: padLeft,\n    maxLeft: maxLeft,\n    padRight: padRight,\n    maxRight: maxRight\n  };\n  return deconstructedFormat;\n};","map":null,"metadata":{},"sourceType":"script"}