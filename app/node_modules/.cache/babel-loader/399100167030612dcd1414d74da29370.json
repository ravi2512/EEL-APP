{"ast":null,"code":"var EventEmitter = require('events').EventEmitter,\n    queryString = require('query-string');\n\nfunction tryParseJson(data) {\n  try {\n    return JSON.parse(data);\n  } catch (error) {\n    return error;\n  }\n}\n\nfunction timeout() {\n  this.request.abort();\n  this.emit('timeout');\n}\n\nfunction Ajax(settings) {\n  var queryStringData,\n      ajax = this;\n\n  if (typeof settings === 'string') {\n    settings = {\n      url: settings\n    };\n  }\n\n  if (typeof settings !== 'object') {\n    settings = {};\n  }\n\n  ajax.settings = settings;\n  ajax.request = new XMLHttpRequest();\n  ajax.settings.method = ajax.settings.method || 'get';\n\n  if (ajax.settings.cors && !'withCredentials' in ajax.request) {\n    if (typeof XDomainRequest !== 'undefined') {\n      // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n      ajax.request = new XDomainRequest();\n    } else {\n      // Otherwise, CORS is not supported by the browser.\n      ajax.emit('error', new Error('Cors is not supported by this browser'));\n    }\n  }\n\n  if (ajax.settings.cache === false) {\n    ajax.settings.data = ajax.settings.data || {};\n    ajax.settings.data._ = new Date().getTime();\n  }\n\n  if (ajax.settings.method.toLowerCase() === 'get' && typeof ajax.settings.data === 'object') {\n    var urlParts = ajax.settings.url.split('?');\n    queryStringData = queryString.parse(urlParts[1]);\n\n    for (var key in ajax.settings.data) {\n      queryStringData[key] = ajax.settings.data[key];\n    }\n\n    var parsedQueryStringData = queryString.stringify(queryStringData);\n    ajax.settings.url = urlParts[0] + (parsedQueryStringData ? '?' + parsedQueryStringData : '');\n    ajax.settings.data = null;\n  }\n\n  ajax.request.addEventListener('progress', function (event) {\n    ajax.emit('progress', event);\n  }, false);\n  ajax.request.addEventListener('load', function (event) {\n    var data = event.target.responseText;\n\n    if (ajax.settings.dataType && ajax.settings.dataType.toLowerCase() === 'json') {\n      if (data === '') {\n        data = undefined;\n      } else {\n        data = tryParseJson(data);\n\n        if (data instanceof Error) {\n          ajax.emit('error', event, data);\n          return;\n        }\n      }\n    }\n\n    if (event.target.status >= 400) {\n      ajax.emit('error', event, data);\n    } else {\n      ajax.emit('success', event, data);\n    }\n  }, false);\n  ajax.request.addEventListener('error', function (event) {\n    ajax.emit('error', event);\n  }, false);\n  ajax.request.addEventListener('abort', function (event) {\n    ajax.emit('error', event, new Error('Connection Aborted'));\n    ajax.emit('abort', event);\n  }, false);\n  ajax.request.addEventListener('loadend', function (event) {\n    clearTimeout(ajax._requestTimeout);\n    ajax.emit('complete', event);\n  }, false);\n  ajax.request.open(ajax.settings.method || 'get', ajax.settings.url, true);\n\n  if (ajax.settings.cors && 'withCredentials' in ajax.request) {\n    ajax.request.withCredentials = !!settings.withCredentials;\n  } // Set default headers\n\n\n  if (ajax.settings.contentType !== false) {\n    ajax.request.setRequestHeader('Content-Type', ajax.settings.contentType || 'application/json; charset=utf-8');\n  }\n\n  if (ajax.settings.requestedWith !== false) {\n    ajax.request.setRequestHeader('X-Requested-With', ajax.settings.requestedWith || 'XMLHttpRequest');\n  }\n\n  if (ajax.settings.auth) {\n    ajax.request.setRequestHeader('Authorization', ajax.settings.auth);\n  } // Set custom headers\n\n\n  for (var headerKey in ajax.settings.headers) {\n    ajax.request.setRequestHeader(headerKey, ajax.settings.headers[headerKey]);\n  }\n\n  if (ajax.settings.processData !== false && ajax.settings.dataType === 'json') {\n    ajax.settings.data = JSON.stringify(ajax.settings.data);\n  }\n}\n\nAjax.prototype = Object.create(EventEmitter.prototype);\n\nAjax.prototype.send = function () {\n  var ajax = this;\n  ajax._requestTimeout = setTimeout(function () {\n    timeout.apply(ajax, []);\n  }, ajax.settings.timeout || 120000);\n  ajax.request.send(ajax.settings.data && ajax.settings.data);\n};\n\nmodule.exports = Ajax;","map":null,"metadata":{},"sourceType":"script"}