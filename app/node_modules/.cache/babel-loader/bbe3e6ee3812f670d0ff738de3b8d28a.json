{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = simpleNumber;\n\nvar _configure = _interopRequireDefault(require(\"react-widgets/lib/configure\"));\n\nvar _formatNumberWithString = _interopRequireDefault(require(\"format-number-with-string\"));\n\nvar _deconstructNumberFormat = _interopRequireDefault(require(\"deconstruct-number-format\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar defaults = {\n  decimal: '.',\n  grouping: ','\n};\n\nfunction simpleNumber(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _defaults$options = _extends({}, defaults, options),\n      decimal = _defaults$options.decimal,\n      grouping = _defaults$options.grouping;\n\n  var localizer = {\n    formats: {\n      default: \"-#\" + grouping + \"##0\" + decimal\n    },\n    // TODO major bump consistent ordering\n    parse: function parse(value, culture, format) {\n      if (format) {\n        var data = (0, _deconstructNumberFormat.default)(format),\n            negative = data.negativeLeftSymbol && value.indexOf(data.negativeLeftSymbol) !== -1 || data.negativeRightSymbol && value.indexOf(data.negativeRightSymbol) !== -1;\n        value = value.replace(data.negativeLeftSymbol, '').replace(data.negativeRightSymbol, '').replace(data.prefix, '').replace(data.suffix, '');\n        var halves = value.split(data.decimalChar);\n        if (data.integerSeperator) halves[0] = halves[0].replace(new RegExp('\\\\' + data.integerSeperator, 'g'));\n        if (data.decimalsSeparator) halves[1] = halves[1].replace(new RegExp('\\\\' + data.decimalsSeparator, 'g'));\n        if (halves[1] === '') halves.pop();\n        value = halves.join('.');\n        value = +value;\n        if (negative) value = -1 * value;\n      } else value = parseFloat(value);\n\n      return isNaN(value) ? null : value;\n    },\n    format: function format(value, _format) {\n      return (0, _formatNumberWithString.default)(value, _format);\n    },\n    decimalChar: function decimalChar(format) {\n      return format && (0, _deconstructNumberFormat.default)(format).decimalsSeparator || decimal || '.';\n    },\n    precision: function precision(format) {\n      var data = (0, _deconstructNumberFormat.default)(format);\n      return data.maxRight !== -1 ? data.maxRight : null;\n    }\n  };\n\n  _configure.default.setNumberLocalizer(localizer);\n\n  return localizer;\n}\n\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}